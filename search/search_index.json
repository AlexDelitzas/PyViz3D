{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Examples Draw meshes. [Demo] [Code] Draw multiple (oriented) bounding box. [Demo] [Code] Draw normals using lines. [Demo] [Code] Installation Intall the latest stable PyViz3D via pip: pip install pyviz3d Getting Started In this simple example we will display multiple point clouds. import numpy as np import pyviz3d.visualizer as viz def main(): # First, we set up a visualizer v = viz.Visualizer() # Random point clouds. for j in range(5): i = j + 1 name = 'Points;'+str(i) num_points = 3 point_positions = np.random.random(size=[num_points, 3]) point_colors = (np.random.random(size=[num_points, 3]) * 255).astype(np.uint8) point_size = 25 * i # Here we add point clouds to the visualizer v.add_points(name, point_positions, point_colors, point_size=point_size, visible=False) # Sample point clouds from the ScanNet dataset. for scene_name in ['scene0140_01', 'scene0451_01']: scene = np.load('examples/' + scene_name + '.npy') point_positions = scene[:, 0:3] point_colors = scene[:, 3:6] point_size = 25.0 # Add more point clouds v.add_points(scene_name, point_positions, point_colors, point_size=point_size) # When we added everything we need to the visualizer, we save it. v.save('test') if __name__ == '__main__': main()","title":"Home"},{"location":"#examples","text":"Draw meshes. [Demo] [Code] Draw multiple (oriented) bounding box. [Demo] [Code] Draw normals using lines. [Demo] [Code]","title":"Examples"},{"location":"#installation","text":"Intall the latest stable PyViz3D via pip: pip install pyviz3d","title":"Installation"},{"location":"#getting-started","text":"In this simple example we will display multiple point clouds. import numpy as np import pyviz3d.visualizer as viz def main(): # First, we set up a visualizer v = viz.Visualizer() # Random point clouds. for j in range(5): i = j + 1 name = 'Points;'+str(i) num_points = 3 point_positions = np.random.random(size=[num_points, 3]) point_colors = (np.random.random(size=[num_points, 3]) * 255).astype(np.uint8) point_size = 25 * i # Here we add point clouds to the visualizer v.add_points(name, point_positions, point_colors, point_size=point_size, visible=False) # Sample point clouds from the ScanNet dataset. for scene_name in ['scene0140_01', 'scene0451_01']: scene = np.load('examples/' + scene_name + '.npy') point_positions = scene[:, 0:3] point_colors = scene[:, 3:6] point_size = 25.0 # Add more point clouds v.add_points(scene_name, point_positions, point_colors, point_size=point_size) # When we added everything we need to the visualizer, we save it. v.save('test') if __name__ == '__main__': main()","title":"Getting Started"},{"location":"changelog/","text":"Version 0.2 0.2.22: Add (oriented) bounding boxes. 0.2.21: Add .obj meshes and other overall improvements. 0.2.19: Add verbose flag to save function. 0.2.18: Several smaller improvements, including colors for lines, alpha value for point clouds when no color is provided and assertions for shapes. 0.2.12: Add alpha value to point clouds and folders to gui. Add progress bar while loading elements. Add camera object. 0.2.11: Add phong shading to point clouds. 0.2.10: Add lines primitives. Can for example be used to display normals. 0.2.9: Add object parameter visible indicating wether the object is visible on default or not.","title":"Changelog"},{"location":"changelog/#version-02","text":"0.2.22: Add (oriented) bounding boxes. 0.2.21: Add .obj meshes and other overall improvements. 0.2.19: Add verbose flag to save function. 0.2.18: Several smaller improvements, including colors for lines, alpha value for point clouds when no color is provided and assertions for shapes. 0.2.12: Add alpha value to point clouds and folders to gui. Add progress bar while loading elements. Add camera object. 0.2.11: Add phong shading to point clouds. 0.2.10: Add lines primitives. Can for example be used to display normals. 0.2.9: Add object parameter visible indicating wether the object is visible on default or not.","title":"Version 0.2"},{"location":"contributing/","text":"Setting up local developement environment Pull the latest stable release from the master branch. Ideally create a new python environment. Do not install and uninstall existing packages of pyviz3d in your local environment. This guarantees that you are running your code and not the one from the installed package. The examples in examples are a good starting point for developing new features. When running code (e.g. examples/example_instance.py ) set your working directory to the root directory of the code base such that the path to the pyviz module is correct. Documentation The documentation pages are mainted using mkdocs . To update the documentation modify the markdown files in docs/*.md . When adding new pages, modify the file mkdocs.yml accordingly. The locally test the documentation, go to ./ and run mkdocs serve . To deploy the documentation: mkdocs gh-deploy . Automatically generating the documentation from docstrings: Install the mkdocstrings plugin for mkdocs: pip install mkdocstrings Add the plugin to the `mkdocs.yaml': '''# mkdocs.yml plugins: mkdocstrings'''","title":"Contributing"},{"location":"contributing/#setting-up-local-developement-environment","text":"Pull the latest stable release from the master branch. Ideally create a new python environment. Do not install and uninstall existing packages of pyviz3d in your local environment. This guarantees that you are running your code and not the one from the installed package. The examples in examples are a good starting point for developing new features. When running code (e.g. examples/example_instance.py ) set your working directory to the root directory of the code base such that the path to the pyviz module is correct.","title":"Setting up local developement environment"},{"location":"contributing/#documentation","text":"The documentation pages are mainted using mkdocs . To update the documentation modify the markdown files in docs/*.md . When adding new pages, modify the file mkdocs.yml accordingly. The locally test the documentation, go to ./ and run mkdocs serve . To deploy the documentation: mkdocs gh-deploy . Automatically generating the documentation from docstrings: Install the mkdocstrings plugin for mkdocs: pip install mkdocstrings Add the plugin to the `mkdocs.yaml': '''# mkdocs.yml plugins: mkdocstrings'''","title":"Documentation"},{"location":"distribution/","text":"We keep the latest stable release of the pyviz3d package available on PyPy . PyPi Loosely following the instructions from [ 1 ] $ pip install twine In your home folder, set up ~/.pypirc : [distutils] index-servers= pypi testpypi [testpypi] repository: https://test.pypi.org/legacy/ username: your username To test the release without messing around with the public PyPi release. First, this creates dist and pyviz3d.egg-info folders which can then be uploaded to the pypi test repository given the correct credentials. Make sure to update the version in the setup.py , it has to be newer then the last uploaded one. Delete the previous dist files rm -rf ./dist/*.tar.gz $ python setup.py sdist $ twine upload --repository testpypi dist/* # this is an alternative $ pip install -i https://test.pypi.org/simple/ pyviz3d When everything works, prepare a new release on github: https://github.com/francisengelmann/pyviz3d/releases After that, the public release can be added to the public PyPi repository: $ python setup.py sdist $ twine upload dist/* Anaconda The Anaconda package is created from the pypi package and is hosted on Anaconda Cloud [2] $ conda install anaconda-client conda-build conda-verify $ conda config --set anaconda_upload no $ conda skeleton pypi pyviz3d $ conda build pyviz3d","title":"Distribution"},{"location":"distribution/#pypi","text":"Loosely following the instructions from [ 1 ] $ pip install twine In your home folder, set up ~/.pypirc : [distutils] index-servers= pypi testpypi [testpypi] repository: https://test.pypi.org/legacy/ username: your username To test the release without messing around with the public PyPi release. First, this creates dist and pyviz3d.egg-info folders which can then be uploaded to the pypi test repository given the correct credentials. Make sure to update the version in the setup.py , it has to be newer then the last uploaded one. Delete the previous dist files rm -rf ./dist/*.tar.gz $ python setup.py sdist $ twine upload --repository testpypi dist/* # this is an alternative $ pip install -i https://test.pypi.org/simple/ pyviz3d When everything works, prepare a new release on github: https://github.com/francisengelmann/pyviz3d/releases After that, the public release can be added to the public PyPi repository: $ python setup.py sdist $ twine upload dist/*","title":"PyPi"},{"location":"distribution/#anaconda","text":"The Anaconda package is created from the pypi package and is hosted on Anaconda Cloud [2] $ conda install anaconda-client conda-build conda-verify $ conda config --set anaconda_upload no $ conda skeleton pypi pyviz3d $ conda build pyviz3d","title":"Anaconda"}]}